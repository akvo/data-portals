apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-portals
spec:
  replicas: 1
  selector:
    matchLabels:
      run: data-portals
      app: data-portals
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        run: data-portals
        data-portals-version: ${TRAVIS_COMMIT}
        app: data-portals
      annotations:
        prometheus.io/scrape: 'true'
    spec:
      containers:
      - name: data-portals-nginx
        image: eu.gcr.io/akvo-lumen/data-portals-nginx:${TRAVIS_COMMIT}
        ports:
        - containerPort: 80
          protocol: TCP
        - containerPort: 8081
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: /ping
            port: 80
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          requests:
            cpu: "50m"
          limits:
            cpu: "1000m"
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: "data-portals-secret"
              key: postgres-db
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "data-portals-secret"
              key: postgres-password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: "data-portals-secret"
              key: postgres-user
      - name: data-portals-backend
        image: eu.gcr.io/akvo-lumen/data-portals-backend:${TRAVIS_COMMIT}
        resources:
          requests:
            cpu: "100m"
          limits:
            cpu: "4000m"
        ports:
        - containerPort: 9000
          protocol: TCP
        env:
        - name: POSTGRES_HOST
          value: localhost
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: "data-portals-secret"
              key: postgres-db
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "data-portals-secret"
              key: postgres-password
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: "data-portals-secret"
              key: postgres-user
      - name: data-portals-frontend
        image: eu.gcr.io/akvo-lumen/data-portals-frontend:${TRAVIS_COMMIT}
        resources:
          requests:
            cpu: "100m"
          limits:
            cpu: "4000m"
        ports:
        - containerPort: 3000
          protocol: TCP
        env:
        - name: MAPBOX_TOKEN
          valueFrom:
              configMapKeyRef:
                name: akvo-data-portals
                key: mapbox-token
        - name: DOMAIN
          valueFrom:
              configMapKeyRef:
                name: akvo-data-portals
                key: domain
        - name: API_PATH
          value: "/api/v1"
      - name: cloudsql-proxy
        image: eu.gcr.io/cloudsql-docker/gce-proxy:1.16
        command: ["/cloud_sql_proxy",
                  "-instances=akvo-lumen:europe-west1:$(GOOGLE_SQL_DB_INSTANCE)=tcp:5432",
                  "-credential_file=/secrets/cloudsql/credentials.json"]
        securityContext:
          runAsUser: 2  # non-root user
          allowPrivilegeEscalation: false
        env:
          - name: GOOGLE_SQL_DB_INSTANCE
            valueFrom:
              configMapKeyRef:
                name: akvo-data-portals
                key: google-sql-db-instance
        volumeMounts:
          - name: "secret-config"
            mountPath: "/secrets/cloudsql/credentials.json"
            subPath: "cloud-database-service-account.json"
            readOnly: true
      volumes:
         - name: "secret-config"
           secret:
             secretName: "data-portals-secret"